/// Before we start...
// You can run this file if you want.
// All code lines are valid, and everything else is properly commented.


/// comments
// single line
/* multi line / with fixed length */


/// variables
bool    var1 = true;                            // or false
int     var2 = 1;                               // 2, 3, 4...
float   var3 = 1.23;                            // decimal values
str     var4 = "abcабс123";                     // strings values
list    var5 = [true, 1, "str", ["anything"]];  // lists with any recursion
map     var6 = ["key": "value", "key2": 123];   // key-value pairs, here is 2-sized, 3-sized: [1: 2: 3, 4: 5: 6, ...]
row     var7 = 1'12!2'4;                        // list of 1, 5, 6, 7, 8, 9, 10, 11, 12
chunk   var8 = { /* block of code */ };         // code blocks of any size
any     var9 = "well, anything you want";       // you can put string there and then int without overriding
/* or custom created witn DataType block */     // bound_int or smth else like this made with DataType blocks


/// operations x operators
//  +   addiction
//  -   substraction
//  *   multiplication
//  /   division
//  %   remain from division? No way, I found name for this operator: "remainder (modulo)"
//  ==  equality
//  !=  not equality
//  >=  more or equal
//  <=  equal or less
//  &&  "and" operator
//  ||  "or" operator
//  &   replacing "and" operator
//  |   replacing "or" operator

// bool
true + false;                           // = true                                               result: bool
true - true;                            // = false                                              result: bool
true == true;                           // = true                                               result: bool
true != true;                           // = false                                              result: bool
true >= true;                           // = true                                               result: bool
true <= true;                           // = true                                               result: bool
true && false;                          // = false                                              result: bool
true || false;                          // = true                                               result: bool
true == false | true;                   // -> true == false || true == true -> true             result: bool
true == false & true;                   // -> true == false && true == true -> false            result: bool

// integer
2 + 3;                                  // = 3                                                  result: int
2 - 3;                                  // = -1                                                 result: int
2 * 3;                                  // = 4                                                  result: int
2 / 3;                                  // = 1.5                                                result: float
3 % 2;                                  // = 1                                                  result: int
2 == 3;                                 // = false                                              result: bool
2 != 3;                                 // = true                                               result: bool
2 >= 3;                                 // = false                                              result: bool
2 <= 3;                                 // = true                                               result: bool

// float
// same as integer, but as decimal (with floating dot), I could just copy, but I think I just better skip it

// strings
"abc" + "b";                            // = abcb                                               result: str
"abc" - "b";                            // = ac                                                 result: str  
"abc" * 2;                              // = abcabc                                             result: str
"abb" / "b";                            // = 2                                                  result: int
"abc" % "b";                            // = ac                                                 result: str
"abc" == "abb"                          // = false                                              result: bool
"ab" != "abc"                           // = true                                               result: bool

// lists
[1, 2, "a"] + [true];                   // = [1, 2, "a", true]                                  result: list
[1, 2.9] + 4;                           // = [5, 6.9]                                           result: list
[1, 2, "a"] - [2];                      // = [1, "a"]                                           result: list
[1, 2] - 2;                             // = [-1, 0]                                            result: list
[1, 2] * 2;                             // = [2, 4]                                             result: list
[1, 2] * [2];                           // = [1, 2, 1, 2]                                       result: list
[1, 2] / 2;                             // = [0.5, 1]                                           result: list
[true] == [true, []]                    // = false                                              result: bool
[true] != [true]                        // = false                                              result: bool

// map
// no operations supported yet

// row
1'9 + 10'11;                            // = 1'11                                               result: row
1'9 + 10;                               // = 1'10                                               result: row
1'9 - 4'5;                              // = 1'9!4'5 = 1'3 + 6'9                                result: row

// chunks
{out: "hello";} + {out: "there";};      // = {out: "hello";                                     
                                        //    out: "there";}                                    result: chunk
{/*1*/ /*2*/ /*3*/ /*2*/} - {/*2*/};// = {/*1*/  /*3*/ };                                   result: chunk

// short operations
// x++                                  -> x = x + 1
// x--                                  -> x = x - 1
// x += y                               -> x = x + y
// x -= y                               -> x = x - y
// x /= y                               -> x = x / y
// x *= y                               -> x = x * y
// x %= y                               -> x = x % y


/// input and output
// for output you can use "out"
out: 123;                               // -> 123
out: "hi";                              // -> hi
out: "number is: ", 7;                  // -> number is: 7
out: "hello " + "there" + "!";          // -> hello there!
out: "hello ", "there", "!";            // -> hello there!
out(","): 1, 2, 3, true;                // -> 1,2,3,true
out(" divider "): 1, "e", 3;            // -> 1 divider e divider 3

/*
// input
str s = in; out: s;                     // this will output what you write in it
out: in;                                // same as above, but without variable
if (in == 7) {out: "user inputs 7";}    // this block will work correctly only if will input 7 in it

// ! if you are using NexeLang Terminal as IDE, don't use "in", use ide::in instead !
str s = ide::in; out: s;                // instead of "in"
out: in;                                // same here
if (in == 7) {out: "user inputs 7";}    // and here
*/ // block above depends on ide, don't uncomment it as it is


/// if, else if, else
if (var1 == true) {
    // this block be executed if variable var1 is true
} else if (true /*same idea as in if*/ ) {
    // if first if will be false, this if will check conditions inside
} else {
    // if everything above is false
}

// example (not very smart XD, but idk how to explain it better)
if (var2 == 2) {
    out: 2;
} else if (var2 == 3) {
    out: 3;
} else if (var2 < 3) {
    if (var2 == 1) {out: 1;}
} else {
    out: var2;
}


/// Cycles
// repeat
repeat (17) {/*code*/}                  // will repeat code block 17 times

// while
int a = 1;
while (a < 10) {                        // cycle will repeat until a not be equal or more than 10
    a++;
}

// for pt1

// for pt2
for ([1, 2, 3] -> arr)                  // for every item in the list will put it in new variable arr.
{                                       // Cycles repeat itself 3 times
    // ...
}


/// Simple examples (all toggether)
// sorry, I'm too lazy now, gonna add this part later


/// parts
part {                                  // sometimes code looks better with parts ig,
    /* parts of code */                 // anyway this is just cosmetic changes, no new scopes
}

part ("you can name this part") {       // part with name
    // code
}

int long_name = 123;
part (long_name -> a) {                 // you can make mask on huge variable name
    out: a, " = ", long_name;           // long name still will be available as well
}


/// functions
/*

<type> <name>(<type> <name>, ...) {
    // code
}

*/

// example
int return_2() {
    return: 2;
}

// void works too, btw NexeLang has multiple return functions, but it's too unstable, so... not yet


















out: "Hello world";
// to be contious...